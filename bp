#!/bin/env bash
#  # +---------------------------------------------+ #
#  # | created by: achmur           time4Linux     | #
#  # | -------------------         __  __ __  __   | #
#  # |                            / /_/ // / / /   | #
#  # | created on: 2023-02-01    / __/ // /_/ /    | #
#  # | updated on: 2023-02-05   / /_/__  __/ /___  | #
#  # |                          \__/  /_/ /_____/  | #
#  # | Description:                                | #
#  # |       my basic programs installer           | #
#  # +---------------------------------------------+ #
. my_colors

# #delta - delta instalation +
# ---------------------------------------------------------------------------
delta(){
  if ! command -v delta &>/dev/null; then
    local ver=$(curl -s https://lib.rs/crates/git-delta | grep -A 4 "versions" | awk 'END{print}')
    dfile=git-delta-musl_"$ver"_amd64.deb
    echo -e "Installing delta with version "$ver
    cd $HOME/tmp
    wget -q https://github.com/dandavison/delta/releases/download/"$ver"/$dfile
    sudo apt install -y ./$HOME/tmp/$dfile
    rm $HOME/tmp/$dfile
  else 
    echo "Delta już jest na systemie"
  fi
  }
# #bat - bat installation +
# ---------------------------------------------------------------------------
bat(){
  if ! command -v bat &>/dev/null; then
    local ver=$(curl -s https://github.com/sharkdp/bat/releases | grep -m 1 -A 4 wb-break-all | awk 'END{print}' | awk -F "\"" '{print $2}' | awk -F "/" '{print $NF}' | sed -e '1s/^.//')
    bfile=bat-musl_"$ver"_amd64.deb
    echo -e "Latest version of "$IGreen"bat $ver $Color_Off"
    sleep 1
    cd $HOME/tmp
    wget -q https://github.com/sharkdp/bat/releases/download/v"$ver"/$bfile
    sudo apt install -y ./$HOME/tmp/$bfile
    rm $HOME/tmp/$bfile
  else
    echo "Bat już jest na systemie"
  fi
}
# #neovim - neovim installation +
# ---------------------------------------------------------------------------
neovim(){
  if command -v nvim &>/dev/null; then 
    local ver=$(nvim -version | head -n1 | awk '{print $2}' | awk -F . '{print $2$3}')
    if (( $ver <= "81" )); then
      sudo apt remove -y neovim
      cd $HOME/tmp
      wget https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.deb
      sudo apt install -y $HOME/tmp/nvim-linux64.deb
      rm $HOME/tmp/nvim-linux64.deb
      echo -e "\nZainstalowano najnowszą wersję neovim"
    elif  (( $ver > "81" )); then
      echo -e "\nJest zainstalowana odpowiednia wersja "$IGreen"neovim v0."${ver:0:1}.${ver:1}$Color_Off
    fi
  else
    cd $HOME/tmp
    wget https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.deb
    sudo apt install -y $HOME/tmp/nvim-linux64.deb
    rm nvim-linux64.deb
    echo -e "\nZainstalowano neovim"
  fi
}

# #rust - rustc installation +
# ---------------------------------------------------------------------------
rust(){
  if command -v rustc &>/dev/null; then 
    ver=$(rustc --version | awk '{print $2}' | awk -F . '{print $1$2}')
    if (( $ver <= "164" )); then
      sudo apt remove -y rustc
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
      echo -e "\nZainstalowano najnowszą wersję "$IGreen"rust "${ver:0:1}.${ver:1}".0"$Color_Off
    elif (( $ver > "164" )); then
      echo -e "\nZainstalowana wersja rust jest wystarczająca."
    fi
  else
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    echo -e "\nZainstalowano "$IGreen"rust "${ver:0:1}.${ver:1}".0"$Color_Off
  fi
}

# update and basic installation
# ---------------------------------------------------------------------------
updt(){
  if command -v nala &>/dev/null; then
    sudo nala update && sudo nala install -y npm pip ripgrep cargo git make python3 nodejs fd-find
  else
    sudo apt update
    sudo apt install -y npm pip ripgrep cargo git make python3 nodejs fd-find
  fi
}

# #golang - golang instalation +
# ---------------------------------------------------------------------------
golang(){
  if ! [[ -d /usr/local/go ]]; then
    cd $HOME/tmp
    wget https://go.dev/dl/go1.19.5.linux-amd64.tar.gz
    sudo tar -C /usr/local -xvf $HOME/tmp/go1.19.5.linux-amd64.tar.gz
    export PATH=$PATH:/usr/local/go/bin
    rm $HOME/tmp/go1.19.5.linux-amd64.tar.gz
    echo "Zainstalowano Golang"
  else 
    echo "Golang zainstalowany, instalacja pominięta"
  fi
}

# #lazyg - lazygit installation +
# ---------------------------------------------------------------------------
lazyg(){
  if ! [[ -e /usr/local/bin/lazygit ]]; then
    LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
    curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
    tar xf lazygit.tar.gz lazygit
    sudo install lazygit /usr/local/bin
    rm lazygit
    echo "Zainstalowano lazygit"
  else
    echo "Lazygit obecny, brak zmian"
  fi
}

# lunarvim dependencis
# ---------------------------------------------------------------------------
lunarvim_dep(){
  npm i neovim 
  npm i tree-sitter-cli
  pip install pynvim
}

# #lunarvim - lunarvim installation
# ---------------------------------------------------------------------------
lunarvim(){
  if [[ -d $HOME/.config/lvim ]]; then
    echo "LunarVim zainstalowany, konfig zlinkowany" 
  else
    LV_BRANCH='release-1.2/neovim-0.8' bash <(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/fc6873809934917b470bff1b072171879899a36b/utils/installer/install.sh)
  fi
}

# my luna configuration
# ---------------------------------------------------------------------------
lvim_config(){
if ! [[ -d $HOME/dotfiles ]]; then
  cd $HOME
  git clone git@github.com:bziczek/dotfiles.git
  if ! [[ -L $HOME/.config/lvim/lua ]]; then
    ln -s $HOME/dotfiles/.config/lvim/lua $HOME/.config/lvim/lua
    echo 'reload("donald.options")' >> $HOME/.config/lvim/config.lua
    echo 'reload("donald.plugins")' >> $HOME/.config/lvim/config.lua
  else
    echo "Wydaje się, że konfig już jest"
  fi
else
  cd $HOME/dotfiles/
  git pull
  if ! [[ -L $HOME/.config/lvim/lua ]]; then
    ln -s $HOME/dotfiles/.config/lvim/lua $HOME/.config/lvim/lua
    echo 'reload("donald.options")' >> $HOME/.config/lvim/config.lua
    echo 'reload("donald.plugins")' >> $HOME/.config/lvim/config.lua
  else
    echo "Link do konfiguracji lvim stworzony" >> $HOME/lunar_prep/info.log
  fi
fi
}
# kontunuacja
# ---------------------------------------------------------------------------
# begin(){
# opt=y
# while [ $opt = y ]; do
#   echo "Wybierz program do instalcji"
# }
end(){
  echo -e "Czy chcesz zainstalować kolejny program? [y/n] \c"
  read -s -n 1 pick
  if [[ $pick = y || $pick = Y ]]; then 
    continue
  else "W porządku, kończymy na dziś"
    exit
  fi
# done
}
# my cases
# ---------------------------------------------------------------------------
echo "Wybierz program do instalacji"
echo -e "
   1) Neovim
   2) Rust
   3) Golang
   4) Bat
   5) Delta
   6) Lazygit
   7) LunarVim
   8) lvim config
   0) "$IGreen"Quit\n"$Color_Off
#
read -s -n 1 Number
case $Number in
  "1") while true; do 
    neovim
    end
    ;;
  "2") rust ;;
  "3") golang ;;
  "4") bat ;;
  "5") delta ;;
  "6") lazyg ;;
  "7")
    updt
    neovim
    bat
    delta
    lazyg
    rust
    golang
    lunarvim_dep
    lunarvim
    lvim_config
    ;;
  "8") lvim_config ;;
  "0") exit 0 ;;
esac
